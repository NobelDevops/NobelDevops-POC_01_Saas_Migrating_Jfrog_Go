name: Golang CI Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build Go binary
      run: |
        go mod tidy
        go build -o myapp hello.go

    - name: Log in to JFrog Docker registry
      run: |
        JFROG_REGISTRY="${{ secrets.JFROG_REGISTRY }}"
        JFROG_USERNAME="${{ secrets.JFROG_USERNAME }}"
        JFROG_IDENTITY_TOKEN="${{ secrets.JFROG_IDENTITY_TOKEN }}"
        echo "$JFROG_IDENTITY_TOKEN" | docker login "$JFROG_REGISTRY" \
          --username "$JFROG_USERNAME" --password-stdin

    - name: Build Docker image
      run: |
        JFROG_REGISTRY="${{ secrets.JFROG_REGISTRY }}"
        DOCKER_REPO="${{ secrets.JFROG_DOCKER_REPO }}"
        IMAGE_NAME="myapp"
        IMAGE_TAG="1.0"
        docker build -t "$JFROG_REGISTRY/$DOCKER_REPO/$IMAGE_NAME:$IMAGE_TAG" .

    - name: Push Docker image to JFrog
      run: |
        JFROG_REGISTRY="${{ secrets.JFROG_REGISTRY }}"
        DOCKER_REPO="${{ secrets.JFROG_DOCKER_REPO }}"
        IMAGE_NAME="myapp"
        IMAGE_TAG="1.0"
        docker push "$JFROG_REGISTRY/$DOCKER_REPO/$IMAGE_NAME:$IMAGE_TAG"

    - name: Upload raw binary to JFrog Generic repo
      run: |
        ARTIFACTORY_URL="${{ secrets.JFROG_URL }}"
        GENERIC_REPO="${{ secrets.JFROG_GENERIC_REPO }}"
        JFROG_USERNAME="${{ secrets.JFROG_USERNAME }}"
        JFROG_IDENTITY_TOKEN="${{ secrets.JFROG_IDENTITY_TOKEN }}"
        curl -u "$JFROG_USERNAME:$JFROG_IDENTITY_TOKEN" \
          -T ./myapp \
          "$ARTIFACTORY_URL/$GENERIC_REPO/myapp"
